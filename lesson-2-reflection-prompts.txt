What happens when you initialize a repository? Why do you need to do it?

When we initialise a repository it creates a .git folder to keep track of the metadata for all the files in the depository. It is necessary to be able to store history of commits for each file.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is the place where we add files that we wish to put in the repository as one commit. It can be understood as the intermediate stage between the working directory and the repository


How can you use the staging area to make sure you have one commit per logical
change?

We can use the diff command to check the changes we have made after the last commit. This can help us ensure that we have a logical change and hence wish to make a new commit.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches give me an option to try out experimental operations on my program without fearing it affecting my main program. I can later on merge it with my original in case my experiment is successful.


How do the diagrams help you visualize the branch structure?

Diagrams help us see the branch system showing each commit as node and it’s reference to it’s parent helping us understanding the network in which the branch works out.


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

When we merge two branches the new commit has both the changes of the branches and it has two parents each to it’s respective parent. We represent it like that because it has access to both the branches merged into it.


What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

The pros of automatic merges is that we can skip the obvious options in the merge while only focussing on the major issues while it’s cons may include machine error in recognising what to include in a file